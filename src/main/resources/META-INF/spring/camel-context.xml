<?xml version="1.0" encoding="UTF-8"?>

<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!-- initialize postgres database (password left out for obvious reasons) -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="org.postgresql.Driver"/>
    <property name="url" value="jdbc:postgresql://127.0.0.1:5432/vehicles"/>
    <property name="username" value="postgres"/>
    <property name="password" value=""/>
  </bean>

  <!-- convenience id for our vehicle bean -->
  <bean id="vehicleBean" class="bountyApi.VehicleBean"/>

  <!-- camel context with all of our rest logic -->
  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <restConfiguration bindingMode="auto" component="restlet" port="8080"/>
    <rest path="/v1/">
      <get uri="/viewvehicles">
        <description>View all vehicles in database</description>
        <route>
          <setBody>
            <constant>select * from vehicles</constant>
          </setBody>
          <to uri="jdbc:dataSource"/>
        </route>
      </get>
      <get uri="/viewvehicle/{id}">
        <description>View vehicles by id / GET param id</description>
        <route>
          <setBody>
            <simple>select * from vehicles where id = '${header.id}'</simple>
          </setBody>
          <to uri="jdbc:dataSource"/>
        </route>
      </get>
      <post uri="/addvehicle">
        <description>Add a vehicle to the database POST param jwt and name</description>
        <route>
          <log message="Inserted new vehicle ${body}"/>
          <to uri="bean:vehicleBean?method=authentication(${body[&quot;jwt&quot;]})" />
          <!--<transform>-->
            <!--<method ref="Vehicle" method="setK"/>-->
          <!--</transform>-->
          <transform>
            <method ref="vehicleBean" method="generateVehicle(&quot;${body[&quot;name&quot;]}&quot;)"/>
          </transform>
          <to uri="hibernate:bountyApi.Vehicle"/>
          <log message="Inserted new vehicle ${body.id}"/>
        </route>
      </post>
      <post uri="/deletevehicle/{id}">
        <description>Delete a vehicle from the database GET param id POST param jwt</description>
        <route>
          <to uri="bean:vehicleBean?method=authentication(${body[&quot;jwt&quot;]})" />
          <setBody>
            <simple>delete from vehicles where id = '${header.id}'</simple>
          </setBody>
          <to uri="jdbc:dataSource"/>
        </route>
      </post>
      <post uri="/editvehicle/{id}">
        <description>Add a vehicle to the database POST param jwt and name</description>
        <route>
          <to uri="bean:vehicleBean?method=authentication(${body[&quot;jwt&quot;]})" />
          <to uri="bean:vehicleBean?method=setStoredString(${body[&quot;name&quot;]})" />
          <setBody>
            <simple>delete from vehicles where id = '${header.id}'</simple>
          </setBody>
          <to uri="jdbc:dataSource"/>
          <transform>
            <method ref="vehicleBean" method="generateVehicle(&quot;${header.id}&quot;,&quot;${body[&quot;name&quot;]}&quot;)"/>
          </transform>
          <to uri="hibernate:bountyApi.Vehicle"/>
        </route>
      </post>
    </rest>
  </camelContext>

  <!-- setup the Camel hibernate component -->
  <bean id="hibernate" class="org.apacheextras.camel.component.hibernate.HibernateComponent">
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="transactionStrategy" ref="springTransactionStrategy"/>
  </bean>

  <!-- setup hibernate and spring to use transaction -->
  <bean id="springTransactionStrategy" class="org.apacheextras.camel.component.hibernate.SpringTransactionStrategy">
    <constructor-arg ref="sessionFactory"/>
    <constructor-arg ref="transactionTemplate"/>
  </bean>
  <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <property name="transactionManager" ref="transactionManager"/>
  </bean>

  <!-- setup Hibernate session factory -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!-- here we define the hibernate mapping files we use -->
    <property name="mappingResources">
      <list>
        <value>Vehicle.hbm.xml</value>
      </list>
    </property>
    <!-- and here we have additional hibernate options -->
    <property name="hibernateProperties">
      <value>
        hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
        hibernate.hbm2ddl.auto=create
      </value>
    </property>
  </bean>

</beans>
